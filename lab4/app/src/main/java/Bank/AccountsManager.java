// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public interface AccountsManager extends com.zeroc.Ice.Object
{
    public static class CreateAccountResult
    {
        public CreateAccountResult()
        {
        }

        public CreateAccountResult(String returnValue, AccountType type)
        {
            this.returnValue = returnValue;
            this.type = type;
        }

        public String returnValue;
        public AccountType type;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AccountType.ice_write(ostr, this.type);
            ostr.writeString(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.type = AccountType.ice_read(istr);
            returnValue = istr.readString();
        }
    }

    AccountsManager.CreateAccountResult createAccount(String firstName, String secondName, String pesel, double startingBalance, double monthlyEarnings, com.zeroc.Ice.Current current)
        throws PeselUsedException;

    Account accessAccount(String pesel, com.zeroc.Ice.Current current)
        throws PeselNotRegisteredException,
               WrongPasswordException;

    static final String[] _iceIds =
    {
        "::Bank::AccountsManager",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Bank::AccountsManager";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createAccount(AccountsManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_firstName;
        String iceP_secondName;
        String iceP_pesel;
        double iceP_startingBalance;
        double iceP_monthlyEarnings;
        iceP_firstName = istr.readString();
        iceP_secondName = istr.readString();
        iceP_pesel = istr.readString();
        iceP_startingBalance = istr.readDouble();
        iceP_monthlyEarnings = istr.readDouble();
        inS.endReadParams();
        AccountsManager.CreateAccountResult ret = obj.createAccount(iceP_firstName, iceP_secondName, iceP_pesel, iceP_startingBalance, iceP_monthlyEarnings, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_accessAccount(AccountsManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pesel;
        iceP_pesel = istr.readString();
        inS.endReadParams();
        Account ret = obj.accessAccount(iceP_pesel, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Account.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "accessAccount",
        "createAccount",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_accessAccount(this, in, current);
            }
            case 1:
            {
                return _iceD_createAccount(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
