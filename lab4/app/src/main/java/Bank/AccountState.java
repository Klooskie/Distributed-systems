// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public class AccountState implements java.lang.Cloneable,
                                     java.io.Serializable
{
    public double balance;

    public double monthlyEarnings;

    public AccountState()
    {
    }

    public AccountState(double balance, double monthlyEarnings)
    {
        this.balance = balance;
        this.monthlyEarnings = monthlyEarnings;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AccountState r = null;
        if(rhs instanceof AccountState)
        {
            r = (AccountState)rhs;
        }

        if(r != null)
        {
            if(this.balance != r.balance)
            {
                return false;
            }
            if(this.monthlyEarnings != r.monthlyEarnings)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Bank::AccountState");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, balance);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, monthlyEarnings);
        return h_;
    }

    public AccountState clone()
    {
        AccountState c = null;
        try
        {
            c = (AccountState)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeDouble(this.balance);
        ostr.writeDouble(this.monthlyEarnings);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.balance = istr.readDouble();
        this.monthlyEarnings = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, AccountState v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public AccountState ice_read(com.zeroc.Ice.InputStream istr)
    {
        AccountState v = new AccountState();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<AccountState> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, AccountState v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(16);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<AccountState> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(AccountState.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final AccountState _nullMarshalValue = new AccountState();

    public static final long serialVersionUID = -8527082791691121517L;
}
