// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public interface PremiumAccountStateHandler extends AccountStateHandler
{
    public static class CalculateCreditCostResult
    {
        public CalculateCreditCostResult()
        {
        }

        public CalculateCreditCostResult(double returnValue, java.util.OptionalDouble costInForeignCurrency)
        {
            this.returnValue = returnValue;
            this.costInForeignCurrency = costInForeignCurrency;
        }

        public CalculateCreditCostResult(double returnValue, double costInForeignCurrency)
        {
            this.returnValue = returnValue;
            this.costInForeignCurrency = java.util.OptionalDouble.of(costInForeignCurrency);
        }

        public double returnValue;
        public java.util.OptionalDouble costInForeignCurrency;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDouble(returnValue);
            ostr.writeDouble(1, this.costInForeignCurrency);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDouble();
            this.costInForeignCurrency = istr.readDouble(1);
        }
    }

    PremiumAccountStateHandler.CalculateCreditCostResult calculateCreditCost(Currency currency, double value, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Bank::AccountStateHandler",
        "::Bank::PremiumAccountStateHandler",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Bank::PremiumAccountStateHandler";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_calculateCreditCost(PremiumAccountStateHandler obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Currency iceP_currency;
        double iceP_value;
        iceP_currency = Currency.ice_read(istr);
        iceP_value = istr.readDouble();
        inS.endReadParams();
        PremiumAccountStateHandler.CalculateCreditCostResult ret = obj.calculateCreditCost(iceP_currency, iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "calculateCreditCost",
        "checkAccountState",
        "getTransfer",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "makeTransfer"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_calculateCreditCost(this, in, current);
            }
            case 1:
            {
                return AccountStateHandler._iceD_checkAccountState(this, in, current);
            }
            case 2:
            {
                return AccountStateHandler._iceD_getTransfer(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return AccountStateHandler._iceD_makeTransfer(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
